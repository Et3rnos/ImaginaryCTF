@page
@model iCTF_Website.Pages.ChallengesModel

@using Westwind.AspNetCore.Markdown
@using Microsoft.EntityFrameworkCore
@using iCTF_Shared_Resources.Managers
@using Microsoft.Extensions.Configuration

@inject SignInManager<ApplicationUser> signInManager
@inject UserManager<ApplicationUser> userManager
@inject DatabaseContext context
@inject IConfiguration configuration

@{
    ViewData["Title"] = "Challenges";
}

@{
    var dynamicScoring = configuration.GetValue<bool>("DynamicScoring");
    var config = await context.Configuration.FirstOrDefaultAsync();

    var categories = new List<string>();
    List<ChallengeInfo> challengeInfos = new List<ChallengeInfo>();
    List<ChallengeInfo> solvedChallengeInfos = new List<ChallengeInfo>();
    if (!signInManager.IsSignedIn(User))
    {
        challengeInfos = await context.Challenges.Where(x => x.State == 2).OrderByDescending(x => x.ReleaseDate).Select(x => new ChallengeInfo { Challenge = x, SolvesCount = x.Solves.Count }).ToListAsync();
        categories = challengeInfos.Select(x => x.Challenge.Category).Distinct().ToList();
    }
    else
    {
        var appUser = await userManager.GetUserAsync(User);
        await context.Entry(appUser).Reference(x => x.User).Query().Include(x => x.Team).LoadAsync();

        SharedStatsManager.Stats stats;
        if (appUser.User.Team == null)
        {
            stats = await SharedStatsManager.GetStats(context, appUser.User, dynamicScoring);
        }
        else
        {
            stats = await SharedStatsManager.GetTeamStats(context, appUser.User.Team, dynamicScoring);
        }
        challengeInfos = stats.UnsolvedChallenges;
        solvedChallengeInfos = stats.SolvedChallenges;
        categories = challengeInfos.Union(solvedChallengeInfos).Select(x => x.Challenge.Category).Distinct().ToList();
    }

}

<div class="container inter my-4">
    <h3 class="mt-3 mb-3">Challenges</h3>
    <p class="mb-4">Start solving challenges to earn points and climb the leaderboard!</p>
    <div>
        <!--
        Already here for ImaginaryCTF 2022
        <div class="alert alert-warning">
            Because we will be running ImaginaryCTF 2022 from July 23 to July 27 no challenges will be released during those days. We encourage anyone that still wants to solve challenges during this time to join <a href="https://2022.imaginaryctf.org" target="_blank" class="text-decoration-none cool-link">ImaginaryCTF 2022</a> for 42+ additional challenges.
        </div>
        -->
    </div>
    <div class="row">
        @if (config != null && config.IsFinished)
        {
            <div>
                <div class="alert alert-warning">
                    The competition is already over. You cannot submit any flags now.
                </div>
            </div>
        }
        else
        {
            <div class="col-md-6 offset-md-3">
                <form method="post">
                    <div class="input-group">
                        <style>
                            input::-webkit-input-placeholder {
                                color: black !important; /*Change the placeholder color*/
                                opacity: 0.5 !important; /*Change the opacity between 0 and 1*/
                            }

                            .input-group-append button:hover {
                                color: white;
                            }

                            .input-group-append button {
                                color: #444;
                            }
                        </style>
                        <input name="flag" type="text" class="form-control" style="border-radius: 0; line-height: 30px; border-color: #888;" placeholder="ictf{s0m3_1337_f14g}">
                        <div class="input-group-append">
                            <button class="btn btn-outline-dark" style="border-radius: 0; line-height: 30px; border-color: #888;" type="submit">Submit Flag</button>
                        </div>
                    </div>
                </form>
                @if (!string.IsNullOrEmpty(Model.Success))
                {
                    <div>
                        <div class="alert alert-success p-2 small" style=" width: calc(100% + 1px) ; left: -1px; border-top: 0; border-top-left-radius: 0; border-top-right-radius: 0; border-bottom-left-radius: 1rem; border-bottom-right-radius: 1rem">
                            <i class="fa-solid fa-check me-1"></i>
                            @Model.Success
                        </div>
                    </div>
                }
                @if (!string.IsNullOrEmpty(Model.Error))
                {
                    <div>
                        <div class="alert alert-danger p-2 small" style=" width: calc(100% + 1px) ; left: -1px; border-top: 0; border-top-left-radius: 0; border-top-right-radius: 0; border-bottom-left-radius: 1rem; border-bottom-right-radius: 1rem">
                            <i class="fa-solid fa-triangle-exclamation me-1"></i>
                            @Model.Error
                        </div>
                    </div>
                }
            </div>
        }
        @if (challengeInfos.Count == 0 && solvedChallengeInfos.Count == 0)
        {
            <p>Looks like no challenges have been released during this round yet :'(</p>
        }
        @foreach (string category in categories)
        {
            <h6 class="text-start text-uppercase mb-3 mt-4 pt-3">
                <i class="fa-solid fa-angles-right me-1"></i>
                @category
            </h6>
            @foreach (var challengeInfo in challengeInfos.Where(x => x.Challenge.Category == category))
            {
                var challenge = challengeInfo.Challenge;
                <div class="col-md-6 col-lg-3 mb-3">
                    <a class="text-decoration-none" data-bs-toggle="modal" data-bs-target="#challenge-modal-@(challenge.Id)" href="#">
                        <div class="card text-light overflow-hidden border-0" style="border-radius: 0.5rem">
                            <div class="card-header fw-bold border-0 text-start bg-primary">
                                <div style="display: flex; justify-content: space-between" class="w-100 py-1">
                                    <div>
                                        <i class="fa-solid fa-flag me-2"></i>
                                        @challenge.Title
                                    </div>
                                    <div>
                                        
                                    </div>
                                </div>
                            </div>
                            <div class="card-body bg-dark py-4">
                                @(dynamicScoring ? DynamicScoringManager.GetPointsFromSolvesCount(challengeInfo.SolvesCount) : challenge.Points) points
                            </div>
                        </div>
                    </a>
                </div>
                <div class="modal fade" id="challenge-modal-@(challenge.Id)">
                    <div class="modal-dialog modal-dialog-centered modal-lg">
                        <div class="modal-content text-dark" style="border-radius: 0">
                            <div class="modal-header">
                                <h5 class="modal-title text-center w-100">@challenge.Title (@(dynamicScoring ? DynamicScoringManager.GetPointsFromSolvesCount(challengeInfo.SolvesCount) : challenge.Points)pts) <span class="d-inline-block">- @challengeInfo.SolvesCount solves</span><br /><small class="text-muted">by @challenge.Author</small></h5>
                            </div>
                            <div class="modal-body pb-0">
                                <b>Description</b>
                                @Markdown.ParseHtmlString(challenge.Description)
                                <b>Attachments</b>
                                @Markdown.ParseHtmlString(challenge.Attachments)
                            </div>
                            <div class="modal-footer">
                                <div class="text-center w-100">
                                    <button type="button" class="btn btn-secondary w-50" data-bs-dismiss="modal">Close</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
            @foreach (var challengeInfo in solvedChallengeInfos.Where(x => x.Challenge.Category == category))
            {
                var challenge = challengeInfo.Challenge;
                <div class="col-md-6 col-lg-3 mb-3">
                    <a class="text-decoration-none" data-bs-toggle="modal" data-bs-target="#challenge-modal-@(challenge.Id)" href="#">
                        <div class="card text-light overflow-hidden border-0" style="border-radius: 0.5rem">
                            <div class="card-header fw-bold border-0 text-start bg-success">
                                <div style="display: flex; justify-content: space-between" class="w-100 py-1">
                                    <div>
                                        <i class="fa-solid fa-flag me-2"></i>
                                        @challenge.Title
                                    </div>
                                    <div>
                                        <i class="fa-solid fa-check"></i>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body bg-dark py-4">
                                @(dynamicScoring ? DynamicScoringManager.GetPointsFromSolvesCount(challengeInfo.SolvesCount) : challenge.Points) points
                            </div>
                        </div>
                    </a>
                </div>
                <div class="modal fade" id="challenge-modal-@(challenge.Id)">
                    <div class="modal-dialog modal-dialog-centered modal-lg">
                        <div class="modal-content text-dark">
                            <div class="modal-header">
                                <h5 class="modal-title text-center w-100">@challenge.Title (@(dynamicScoring ? DynamicScoringManager.GetPointsFromSolvesCount(challengeInfo.SolvesCount) : challenge.Points)pts) <span class="d-inline-block">- @challengeInfo.SolvesCount solves</span><br /><small class="text-muted">by @challenge.Author</small></h5>
                            </div>
                            <div class="modal-body pb-0">
                                <b>Description</b>
                                @Markdown.ParseHtmlString(challenge.Description)
                                <b>Attachments</b>
                                @Markdown.ParseHtmlString(challenge.Attachments)
                                @if (configuration.GetValue<bool>("ShowWriteupsAndFlags"))
                                {
                                    <b style="cursor: pointer" class="d-block mb-2" data-bs-toggle="collapse" href="#writeup-@(challenge.Id)">Writeup <i class="fas fa-caret-down"></i></b>
                                    <div class="collapse" id="writeup-@(challenge.Id)">
                                        @Markdown.ParseHtmlString(challenge.Writeup)
                                    </div>
                                    <b style="cursor: pointer" class="d-block mb-2" data-bs-toggle="collapse" href="#flag-@(challenge.Id)">Flag <i class="fas fa-caret-down"></i></b>
                                    <div class="collapse" id="flag-@(challenge.Id)">
                                        <p>@challenge.Flag</p>
                                    </div>
                                }
                            </div>
                            <div class="modal-footer">
                                <div class="text-center w-100">
                                    <button type="button" class="btn btn-secondary w-50" data-bs-dismiss="modal">Close</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>